name: Publish + Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
jobs:
  release:
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        node-version: [16]
    steps:
      -
        name: (setup) checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      -
        name: (setup) pnpm
        uses: pnpm/action-setup@v2

      -
        name: (setup) node ${{matrix.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}
          registry-url: https://registry.npmjs.org/
          cache: "pnpm"

      -
        name: (setup) install deps
        shell: bash
        run: pnpm install

      -
        name: publish to npm
        shell: bash
        run: |
          pnpm publish --access public --no-git-checks --tag ${TAG:-latest}
        env:
          TAG: 'latest'
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      -
        name: create new release
        run: npx conventional-github-releaser -p angular
        env:
          CONVENTIONAL_GITHUB_RELEASER_TOKEN: ${{secrets.GITHUB_TOKEN}}

      -
        name: publish to gpr
        shell: bash
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.repository }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx -q -y zx \
          --shell="$(which bash)" \
          --prefix="export REPO_OWNER='${REPO_OWNER}'; export PATH='${PATH}';" \
          --experimental << 'EOL'
            // start spinner
            let stop = startSpinner('Publishing to GitHub Package Registry...');

            // packages
            (
              await glob('packages/**/*/package.json')
            ).forEach(async package => {
              // change into package directory
              await cd(dirname(package));
              // read(fs-extra)
              const pkg = await fs.readJson(package)

              // copy
              await $`cp -f ${package} ${package}~`

              // strip existing scope, if it exists, and add repository owner
              const scope = (process.env.REPO_OWNER || 'nberlette')
              pkg.name = pkg.name && pkg.name.replace(/^(.+[/])?(\S+)$/, `@${scope}/$2`)

              // write
              await fs.writeJson(package, pkg, { spaces: 2 })

              // publish
              await $`npm publish --dry-run --access public --no-git-checks --no-commit-hooks --ignore-scripts --scope=@${scope} --registry=https://npm.pkg.github.com`

              // pause
              await sleep(2000)

              // restore
              await $`rm -f ${packageJson} && mv ${packageJson}~ ${packageJson}`
            }

            // stop spinner
            stop()
          EOL
